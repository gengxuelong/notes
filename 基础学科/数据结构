# 数据结构

数据的逻辑结构，数据的储存结构，定义在其上的运算集合

#### 四种基本数据结构

集合结构，线性结构，树型结构，网状结构

### 线性结构：

#### 1. 线性表

- 介绍线性表的抽象数据类型的定义

- 顺序储存结构
- 链式存储结构，

- 定义在其上的运算
  - 一元多项式的表示和相加
  - 顺序表与链表的总和比较

#### 2.1.1 线性表的定义

线性表：linear list / linear table

> 在一个数据表中,列为数据项，
>
> 行为“记录”

线性表是具有相同数据类型的n个数据元素的有限序列。其中n为表长，当n为零是，线性表为空表，一般用L命名线性表。其一般表达式为：

L = {a1,a2,...,ai,ai+1,...,an}

a3 相对于a2来说,...... **直接前驱，直接后继**

除整数第一倒数第一外，每个元素只有一个直接前驱和直接后继

**<u>线性表必须是相同的数据类型</u>**

##### 线性表的特点

- 同一性
- 有穷性
- 有序性

##### 线性表的抽象数据类型

1. 数据元素
2. 结构关系
3. 基本操作

![](D:\截图\数据结构\4.png)

##### 顺序存储结构的定义：

用一组地址连续的储存单元依次储存线性表中的各个元素。使得线性表中在逻辑结构上相邻的数据元素存储在相邻的物理存储单元中。

计算公式： 

Loc(ai) = Loc(a1)+(i-1)*k;

Loc(a1) 成为基地址

C语言实现：

> define MAXSIZE 100
>
> typedef struct
>
> {
>
>  ElementType  elem[MAXSIZE];/数组储存数据元素
>
> int last;//为表尾指示器
>
> }SeqList;

注意： 区分元素中的序号和数组的下标，序号= 下标+1

#### 2.2.2顺序储存结构上的基本运算

1. ##### 查找操作

- 按序号查找，
- 按内容查找

> 对于顺序存储结构的线性表：
>
> 按序号查找更加高效

查找操作2：

在线性表中找出元素e

先找出元素e的序号，在使用第一种查找

```C
int Locate(SeqList L ,ElemType e){
	int i = 0;
	while(i<=L.last && L.elem[i] != e){
	i++;
	}
	if(i<=L.last)
		return i+1;
	else 
		return -1;
}
```

##### 插入操作：

![](D:\截图\数据结构\5.png)

###### 顺序合并算法

![](D:\截图\数据结构\6.png)

###### 顺序储存结构的优缺点分析：

- 优点
  - 

- 缺点

![](D:\截图\数据结构\7.png)

#### 线性表的链式存储结构

单链表，单链表上的操作

##### 链表定义：

曹勇链式存储结构的线性表称为链表

##### 单链表：

每个结点只有一个指针域和大数据域

存储数据元素的直接后继的地址

###### 头结点：

头结点不存数据，用来代表这个链表

```c
typedef struct Node
{
	ElemTyoe data;
    struct Node *nextl;
}Node,*LinkList;
有两个别称：Node用来定义一般节点，* Link List用来定义头结点
```

#### 基本运算：

##### 求单链表的长度

######  尾插入，

###### 头插入

##### 线性表的顺序储存结构：

- 优点：
  - 无需为表示表中的元素之前的逻辑关系，增加额外的储存空间
  - 可以快速的存取表中任意位置的元素

- 缺点



##### 链式存储

### 头插法建表：



### 按序号查找

### 按值查找

返回首次找到的其值为W的 Node位置



#### 循环链表。

是一个首位相连的链表

### 静态链表

采用数据模拟的方式实现链表

基本特征：

存储池，结点结构，游标机制

# 开年第一节课

链表定义： 

采用链式存储结构的线性表称为 链表。

节点： 存储线性表的每个数据元素值得信息 与元素之间的逻辑关系，既 后继节点地址信息的两部分存储影像。

单链表定义： 每个节点只有一个指针域的链表，包括数据域和一个指针域。

头指针： 指向链表头结点的指针。

单来女哦啊的存储结构C语言的描述：

```c
typedef struct Node{
    ElementType data;
    struct Node *next;
}Node,*LinkedList
```

链表类型：

- 单链表
- 循环链表
- 双向链表
- 静态链表

关于链表的基本运算



## 一元多项式的表示及相加

一个一元多项式Pn(x) 可以按升幂的形式写成：

。。。

在计算机中：可以用一个线性表来表示： 

P= （p0,p1,..pn);

在计算机中存储一个一元多项式，最核心的是它的系数。

- 只存储各项的系数，存储位下标对应其指数项，适于非零系数多的多项式。针对项数特别少，但是幂数特别大的情况不用这种方法
- 系数和指数均存入顺序表。适用于零项很多 的情况。

用单链表存储多项式的结点结构：

数据域： 系数 、指数。

C语言表示：

```c
Polylist polycerate(){
    Polynode *head ,*rear,*s;
    int c,e;
    h = (Polynode *)malloc(sizeof(Polynode));//建立多项式的头结点
    rear = head;//*rear 始终指向单链表的尾，便于尾插法建表。
    scanf("%d,%d" ,&c,&e);//输入多项式的系数和指数项
    while(c!=0){若c = 0，则代表多项式的输入结束
        s = (Polynode *) malloc(sizeof(Polynode));//申请新的结点
        s->coaf = c;
        s->exp = e;
        rear->next = s;
        rear = s;
        scanf("%d,d%",&c,&e);
    }
}
```

两个多项式相加： 

运算规则： 两个多项式中的所有指数相同的项对象系数相加，若和不为零，  则。。。

首元结点：都有

头结点： 不存储数据，有指针域

头指针： 仅仅一个指针

顺序表和链表的比较

- 基于空间的考虑: 链表更好
- 储存密度： 顺序表的存储密度为1，链表的存储密度小于1，因为有指针域的存在。
- 基于时间的考虑。： 顺序表的查找时间消耗极短。插入删除 链表时间极短。
- 基于语言的考虑：在没有提供指针类型的高级语言中，采用链表结构，则可以使用光标实现的静态链表。

线性表链式存储方式的比较

- 带头结点的单链表
- 带头结点循环单链表（头指针）
- 带尾指针的循环单链表
- 带头结点双向循环链表

线性表的储存方式：

线性表的顺序存储：

线性表的链式结构：

单链表的操作特点：

1.  顺链操作技术： 从头开始，访问单链表L中结点
2. 指针保留技术：

链表处理中的相关技术:

- 单链表与多链表的擦别在于指针域的个数
- 一般链表和循环链表的差别在于首位链表是否相连。
- 判断当前结点p是否文表尾
- 链表的表长度n值并未显示保存

分解顺序表尾基数偶两部分

# 第二节课时

例题一： 分解顺序表为奇偶两部分。

顺序是乱的，只含int数值。把奇数放在左边，把偶数放在右边。

解： 使用两个移动指针，从两头出发，在i < j 的情况下，i如果指向奇数，则往前走，j如果指向偶数，则直接往前走。如果i 指向的某个元素有偶数，同时j指向的是个奇数时，交换i和j所指向元素。

例题三： 二进制数加一运算。

高位存在表头，地位存在表尾部。



## 第三章 栈和队列

栈: 限定性线性表。只允许在端点位置操作。

由于栈顶的位置是变化的，说以需要设置栈顶指示器。

当栈中没有元素时称为空栈。先进后出。

